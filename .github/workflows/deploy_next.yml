name: deploy (next)
on:
  push:
    branches:
      - next

jobs:
  build:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v1

        - name: Install Node.js
          uses: actions/setup-node@v3
          with:
            node-version: 16.15.1
  
        - uses: pnpm/action-setup@v2
          with:
            version: 7.33.4

        - name: Get pnpm store directory
          shell: bash
          run: |
            echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
  
        - uses: actions/cache@v3
          name: Setup pnpm cache
          with:
            path: ${{ env.STORE_PATH }}
            key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
            restore-keys: |
              ${{ runner.os }}-pnpm-store-

        - name: Install dependencies
          run: pnpm install --no-frozen-lockfile

        - name: Setup Git user
          env:
            GIT_HUB_TOKEN_GLOBAL: ${{ secrets.GIT_HUB_TOKEN_GLOBAL }}
          run: |
            git config --global user.email "development@expandonline.nl"
            git config --global user.name "Dept"
            git remote set-url origin https://${GIT_HUB_TOKEN_GLOBAL}:x-oauth-basic@github.com/${{ github.repository }}.git

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: eu-central-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build api image
          env:
            SSH_PRIVATE_KEY:  ${{ secrets.SSH_PRIVATE_KEY }}
            DOCKER_DIR_API: ${{ secrets.DOCKER_DIR_API }}
          run: |
            eval "$(ssh-agent -s)"
            echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
            cd apps/api/
            pnpm --silent --workspace-root pnpm-context -- apps/api/Dockerfile | docker buildx build -t dept-novu-api --build-arg PACKAGE_PATH=apps/api -

        - name: Build ws image
          env:
            SSH_PRIVATE_KEY:  ${{ secrets.SSH_PRIVATE_KEY }}
            DOCKER_DIR_WS: ${{ secrets.DOCKER_DIR_WS }}
          run: |
            eval "$(ssh-agent -s)"
            echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
            docker build --progress plain -t dept-novu-ws -f ${DOCKER_DIR_WS}/Dockerfile --ssh default .
        
        - name: Build web image
          env:
            SSH_PRIVATE_KEY:  ${{ secrets.SSH_PRIVATE_KEY }}
            DOCKER_DIR_WEB: ${{ secrets.DOCKER_DIR_WEB }}
          run: |
            eval "$(ssh-agent -s)"
            echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
            docker build --progress plain -t dept-novu-web -f ${DOCKER_DIR_WEB}/Dockerfile --ssh default .

        - name: Build widget image
          env:
            SSH_PRIVATE_KEY:  ${{ secrets.SSH_PRIVATE_KEY }}
            DOCKER_DIR_WIDGET: ${{ secrets.DOCKER_DIR_WIDGET }}
          run: |
            eval "$(ssh-agent -s)"
            echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
            docker build --progress plain -t dept-novu-widget -f ${DOCKER_DIR_WIDGET}/Dockerfile --ssh default .

        - name: Build embed image
          env:
            SSH_PRIVATE_KEY:  ${{ secrets.SSH_PRIVATE_KEY }}
            DOCKER_DIR_EMBED: ${{ secrets.DOCKER_DIR_EMBED }}
          run: |
            eval "$(ssh-agent -s)"
            echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
            docker build --progress plain -t dept-novu-embed -f ${DOCKER_DIR_EMBED}/Dockerfile --ssh default .

        - name: Build worker image
          env:
            SSH_PRIVATE_KEY:  ${{ secrets.SSH_PRIVATE_KEY }}
            DOCKER_DIR_WORKER: ${{ secrets.DOCKER_DIR_WORKER }}
          run: |
            eval "$(ssh-agent -s)"
            echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
            pnpm --silent --workspace-root pnpm-context -- apps/worker/Dockerfile | docker buildx build --build-arg PACKAGE_PATH=apps/worker - -t dept-novu-worker --load
        

        - name: Push images
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            GIT_COMMIT: ${{ github.sha }}
            REPO_WS: ${{ secrets.REPO_WS }}
            REPO_WEB: ${{ secrets.REPO_WEB }}
            REPO_WIDGET: ${{ secrets.REPO_WIDGET }}
            REPO_EMBED: ${{ secrets.REPO_EMBED }}
            REPO_API: ${{ secrets.REPO_API }}
            REPO_WORKER: ${{ secrets.REPO_WORKER }}
          run: |
            docker tag dept-novu-ws ${REPO_WS}:$GIT_COMMIT
            docker push ${REPO_WS}:$GIT_COMMIT
            docker tag dept-novu-web ${REPO_WEB}:$GIT_COMMIT
            docker push ${REPO_WEB}:$GIT_COMMIT
            docker tag dept-novu-widget ${REPO_WIDGET}:$GIT_COMMIT
            docker push ${REPO_WIDGET}:$GIT_COMMIT
            docker tag dept-novu-embed ${REPO_EMBED}:$GIT_COMMIT
            docker push ${REPO_EMBED}:$GIT_COMMIT
            docker tag dept-novu-api ${REPO_API}:$GIT_COMMIT
            docker push ${REPO_API}:$GIT_COMMIT
            docker tag dept-novu-worker ${REPO_WORKER}:$GIT_COMMIT
            docker push ${REPO_WORKER}:$GIT_COMMIT
        - name: Deploy
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            GIT_COMMIT: ${{ github.sha }}
            DOCKER_DIR: ${{ secrets.DOCKER_DIR }}
            REPO_WS: ${{ secrets.REPO_WS }}
            REPO_WEB: ${{ secrets.REPO_WEB }}
            REPO_WIDGET: ${{ secrets.REPO_WIDGET }}
            REPO_EMBED: ${{ secrets.REPO_EMBED }}
            REPO_API: ${{ secrets.REPO_API }}
            REPO_WORKER: ${{ secrets.REPO_WORKER }}
          run: |
            cd ${DOCKER_DIR}/deploy
            BRANCH=`echo ${{github.ref}} | sed "s/refs\/heads\///"`
            for f in ${BRANCH}-*.json; do
              envsubst < $f > fixed_$f
              REVISION=`aws ecs register-task-definition --region eu-central-1 --cli-input-json file://fixed_$f | grep -oP '"revision": \K([0-9]+)'`;
              aws ecs update-service --region eu-central-1 --service novu --cluster novu --task-definition novu:${REVISION};
            done
